} else {
W <- stats::rnorm(1, (alpha * m22) + ((1 - alpha) * X[i - 1]), s2 + 10)
V <- stats::rnorm(1, (alpha * m11) + ((1 - alpha) * X[i - 1]), s1 + 10)
}
# Adjusting the proposal density based on the location of the previously iterated value
if (abs(X[i - 1] - m11) < abs(X[i - 1] - m22)) {
Y <- W
} else {
Y <- V
}
rho <- target_density(Y, m1, m2, s1, s2, alpha) / target_density(X[i - 1], m1, m2, s1, s2, alpha) # defined the rate parameter for Metropolis Hastings Algorithm
# stored the next iterated value of the chain
if (stats::runif(1) < rho) {
X[i] <- Y
} else {
X[i] <- X[i - 1]
}
}
return(X)
}
#--------------------------------------------#
# function to return values from simultanious running of the chain and generate histogram from the data
#--------------------------------------------#
#' MCMC mixture
#'
#' MCMCmixture function simulate
#' random variables from a Univariate Bimodal Gaussian Mixture Distribution. The means and variances of the 2
#' Gaussian distributions and the mixing parameter that form the target mixture distribution will be taken
#' as input from the user, along with the number of values to be simulated. This function generates 1000 replications
#' of the markov chain with stationery distribution as the target distribution and plots the histogram of the values produced.
#'
#'
#' @inheritParams target_density
#' @param Nsim  number of values to be simulated from the mixture distribution
#'
#' @return vector of simulated values from the target distribution
#' @export
#'
#' @examples
#' MCMCmixture(1, 10, 2, 3, 0.3, 1000, density = "Normal")
#' MCMCmixture(-10, 20, 10, 5, 0.6, 1000, density = "Normal")
#' MCMCmixture(-1, 7, 1, 3, 0.5, 1000, density = "Cauchy")
#'
MCMCmixture <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
m11 <- min(m1, m2)
m22 <- max(m1, m2)
n <- Nsim # declared number of replications of the chain
Z <- do.call("rbind", replicate(n, chain(m11, m1, m2, s1, s2, alpha, Nsim, density), simplify = F))
R <- Z[, Nsim]
x <- min(R) - 3:max(R) + 3
# histogram of generated values along with the density curve
graphics::hist(R, breaks = 70, prob = T)
graphics::curve(target_density(x, m1, m2, s1, s2, alpha, density), min(R), max(R), add = TRUE)
return(R)
}
MCMCmixture(1, 10, 2, 3, 0.3, 200, density = "Normal")
MCMCmixture(1, 10, 2, 3, 0.3, 2000, density = "Normal")
MCMCmixture(-1, 7, 1, 3, 0.5, 3000, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, 0.5, 30, density = "Cauchy")
MCMCmixture <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
m11 <- min(m1, m2)
m22 <- max(m1, m2)
n <- 1000 # declared number of replications of the chain
Z <- do.call("rbind", replicate(n, chain(m11, m1, m2, s1, s2, alpha, Nsim, density), simplify = F))
R <- Z[, Nsim]
x <- min(R) - 3:max(R) + 3
# histogram of generated values along with the density curve
graphics::hist(R, breaks = 70, prob = T)
graphics::curve(target_density(x, m1, m2, s1, s2, alpha, density), min(R), max(R), add = TRUE)
return(R)
}
MCMCmixture(-1, 7, 1, 3, 0.5, 30, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, 0.5, 30, density = "Cauchy")
MCMCmixture <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
m11 <- min(m1, m2)
m22 <- max(m1, m2)
n <- 1000 # declared number of replications of the chain
Z <- do.call("rbind", replicate(Nsim, chain(m11, m1, m2, s1, s2, alpha, n, density), simplify = F))
R <- Z[, Nsim]
x <- min(R) - 3:max(R) + 3
# histogram of generated values along with the density curve
graphics::hist(R, breaks = 70, prob = T)
graphics::curve(target_density(x, m1, m2, s1, s2, alpha, density), min(R), max(R), add = TRUE)
return(R)
}
MCMCmixture(-1, 7, 1, 3, 0.5, 30, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, 0.5, 300, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, 0.5, 3000, density = "Cauchy")
MCMCmixture <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
m11 <- min(m1, m2)
m22 <- max(m1, m2)
n <- 1000 # declared number of replications of the chain
Z <- do.call("rbind", replicate(n, chain(m11, m1, m2, s1, s2, alpha, Nsim, density), simplify = F))
R <- Z[, Nsim]
x <- min(R) - 3:max(R) + 3
# histogram of generated values along with the density curve
graphics::hist(R, breaks = 70, prob = T)
graphics::curve(target_density(x, m1, m2, s1, s2, alpha, density), min(R), max(R), add = TRUE)
return(R)
}
MCMCmixture(-1, 7, 1, 3, 0.5, 3000, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, 0.5, 300, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, 0.5, 30, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, 0.5, 10, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, 0.5, 100, density = "Cauchy")
MCMCmixture(-1, 7, 1, 3, -1, 100, density = "Cauchy")
MCMCmixture(-1, 7, 1, -1, -1, 100, density = "Cauchy")
is.integer(-3)
is.integer(2)
is.integer(2.1)
is.integer(0.3)
(Nsim %% 1 == 0)
Nsim=10
(Nsim %% 1 == 0)
#---------------------------------------------#
# function for target bimodal density
#---------------------------------------------#
#' target_density
#'
#'
#' target_density gives the value of the density of a univariate Bimodal Gaussian / Bimodal Cauchy Mixture Distribution. The means/medians and variances/scale parameters of the 2
#' Gaussian/Cauchy distributions and the mixing parameter are taken as input from the user.
#'
#'
#' @param x     argument value of the density function
#' @param m1 mean of 1st univariate gaussian distribution or median of 1st cauchy Distribution depending on value of density parameter
#' @param m2 mean of 2nd univariate gaussian distribution or median of 2nd cauchy Distribution depending on value of density parameter
#' @param s1  variance of 1st univariate gaussian distribution or scale parameter of 1st Cauchy Distribution depending on value of density parameter
#' @param s2  variance of 2nd univariate gaussian distribution or scale parameter of 2nd Cauchy Distribution depending on value of density parameter
#' @param alpha value of mixing parameter
#' @param density specifies the density function as either Normal or Cauchy
#'
#' @return value of the density function at x
#' @export
#'
#'
#' @examples
#' target_density(x = 1, m1 = 5, m2 = 0, s1 = 3, s2 = 1, alpha = 0.5)
#' target_density(x = 8, m1 = 2, m2 = 7, s1 = 2, s2 = 1, alpha = 0.1, density = "Normal")
#' target_density(x = 7, m1 = 5, m2 = 1, s1 = 3, s2 = 2, alpha = 0.3, density = "Cauchy")
#'
target_density <- function(x, m1, m2, s1, s2, alpha, density = "Normal") {
if(s1 <= 0 ){
stop("Scale parameter cannot be non-positive; supply new scale parameter")
}
if(s2 <0 ){
stop("Scale parameter cannot be non-positive; supply new scale parameter")
}
if(alpha > 1 ){
stop("mixing parameter cannot be greater than 1")
}
if(alpha <0 ){
stop("mixing parameter cannot be negative")
}
if (density == "Cauchy") {
W <- alpha * stats::dcauchy(x, m1, s1)
V <- (1 - alpha) * stats::dcauchy(x, m2, s2)
} else {
W <- alpha * stats::dnorm(x, m1, s1)
V <- (1 - alpha) * stats::dnorm(x, m2, s2)
}
return(W + V)
}
#-----------------------------------------------#
# function to generate Markov chain
#-----------------------------------------------#
#' chain
#'
#' chain simulates random variables from a Markov Chain having stationery distribution as
#' a univariate Bimodal Gaussian Mixture Distribution. The means and variances of the 2
#' Gaussian distributions and the mixing parameter that form the target mixture distribution will be taken
#' as input from the user, along with the number of values to be simulated. The function returns
#' the values generated from the chain
#'
#'
#'
#' @param t starting value of the chain
#' @inheritParams target_density
#' @param Nsim  number of values to be simulated from the mixture distribution
#'
#'
#' @return vector of simulated values from the target distribution
#' @export
#'
#' @examples
#' chain(2, 1, 10, 2, 3, 0.3, 1000)
#' chain(5, 4, 3, 3, 3, 0.5, 1000)
#' chain(-3, -2, -4, 2, 2, 0.9, 1000, density = "Cauchy")
#'
chain <- function(t, m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
if(Nsim <= 50 || Nsim %% 1 != 0){
stop("Please resupply positive value of Nsim that is greater than 50 ")
}
X <- rep(0, Nsim)
m11 <- min(m1, m2)
m22 <- max(m1, m2)
if (m11 == m1) {
s11 <- s1
s22 <- s2
} else {
s11 <- s2
s22 <- s1
}
X[1] <- t # Initialized the chain
for (i in 2:Nsim)
{
# Code for Proposal Density
if (density == "Cauchy") {
W <- stats::rcauchy(1, (alpha * m22) + ((1 - alpha) * X[i - 1]), s2 + 10)
V <- stats::rcauchy(1, (alpha * m11) + ((1 - alpha) * X[i - 1]), s1 + 10)
} else {
W <- stats::rnorm(1, (alpha * m22) + ((1 - alpha) * X[i - 1]), s2 + 10)
V <- stats::rnorm(1, (alpha * m11) + ((1 - alpha) * X[i - 1]), s1 + 10)
}
# Adjusting the proposal density based on the location of the previously iterated value
if (abs(X[i - 1] - m11) < abs(X[i - 1] - m22)) {
Y <- W
} else {
Y <- V
}
rho <- target_density(Y, m1, m2, s1, s2, alpha) / target_density(X[i - 1], m1, m2, s1, s2, alpha) # defined the rate parameter for Metropolis Hastings Algorithm
# stored the next iterated value of the chain
if (stats::runif(1) < rho) {
X[i] <- Y
} else {
X[i] <- X[i - 1]
}
}
return(X)
}
#--------------------------------------------#
# function to return values from simultanious running of the chain and generate histogram from the data
#--------------------------------------------#
#' MCMC mixture
#'
#' MCMCmixture function simulate
#' random variables from a Univariate Bimodal Gaussian Mixture Distribution. The means and variances of the 2
#' Gaussian distributions and the mixing parameter that form the target mixture distribution will be taken
#' as input from the user, along with the iteration number of the Markov Chains to be simulated. This function generates 1000 replications
#' of the markov chain with stationery distribution as the target distribution, returns the 1000-long vector of generated values at the Nsim-th
#' iteration of each chain and plots the histogram of the values produced.
#'
#'
#' @inheritParams target_density
#' @param Nsim  number of values to be simulated from the mixture distribution
#'
#' @return vector of simulated values from the target distribution
#' @export
#'
#' @examples
#' MCMCmixture(1, 10, 2, 3, 0.3, 1000, density = "Normal")
#' MCMCmixture(-10, 20, 10, 5, 0.6, 2000, density = "Normal")
#' MCMCmixture(-1, 7, 1, 3, 0.5, 3000, density = "Cauchy")
#'
MCMCmixture <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
m11 <- min(m1, m2)
m22 <- max(m1, m2)
n <- 1000 # declared number of replications of the chain
Z <- do.call("rbind", replicate(n, chain(m11, m1, m2, s1, s2, alpha, Nsim, density), simplify = F))
R <- Z[, Nsim]
x <- min(R) - 3:max(R) + 3
# histogram of generated values along with the density curve
graphics::hist(R, breaks = 70, prob = T)
graphics::curve(target_density(x, m1, m2, s1, s2, alpha, density), min(R), max(R), add = TRUE)
return(R)
}
MCMCmixture(-1, 7, 1, 3, 0.5, 100, density = "Cauchy")
chain(5, 4, 3, 3, 3, 0.5, 10)
chain(5, 4, 3, 3, 3, 0.5, 100)
chain(5, 4, 3, 3, 3, 0.5, -1)
chain(5, 4, 3, -3, 3, 0.5, -1)
chain(5, 4, 3, 3, -3, 0.5, 100)
chain(5, 4, 3, 3, -3, 5, 100)
chain(5, 4, 3, 3, 3, 5, 100)
MCMCmixture(1, 10, 2, 3, 0.3, 10, density = "Normal")
MCMCmixture(1, 10, 2, -3, 0.3, 100, density = "Normal")
MCMCmixture(1, 10, 2, 1, 3, 100, density = "Normal")
MCMCmixture(1, 10, 2, 1, 3, 100.5, density = "Normal")
chain(2, 1, 10, 2, 3, 0.3, 100)
chain(2, 1, 10, 2, 3, 0.3, 1000)
MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5, Nsim = 1000)
S = c(1:100)
S
S[1:50]
S[:50]
MCMCrate <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
n <- 1000
S <- c()
Z <- do.call("rbind", replicate(n, chain(m1, m1, m2, s1, s2, alpha, Nsim, density), simplify = F))
for (j in 1:Nsim)
{
P <- Z[, j]
V <- sort(P)
E <- c()
for (i in 1:n){
E[i] <- i / n
}
O <- c()
if (density == "Cauchy") {
for (i in 1:n){
x <- V[i]
O[i] <- abs(E[i] - ((alpha * stats::pcauchy(x, m1, s1)) + ((1 - alpha) * stats::pcauchy(x, m2, s2))))
}
}
else {
for (i in 1:n)
{
x <- V[i]
O[i] <- abs(E[i] - ((alpha * stats::pnorm(x, m1, s1)) + ((1 - alpha) * stats::pnorm(x, m2, s2))))
}
}
M <- max(O)
S[j] <- M
}
plot(S[1:50])
return(S)
}
MCMCrate(m1 = 10, m2 = 0, s1 = 2, s2 = 4, alpha = 0.5, Nsim = 1000, density = "Cauchy")
MCMCrate <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
n <- 1000
S <- c()
Z <- do.call("rbind", replicate(n, chain(m1, m1, m2, s1, s2, alpha, Nsim, density), simplify = F))
for (j in 1:Nsim)
{
P <- Z[, j]
V <- sort(P)
E <- c()
for (i in 1:n){
E[i] <- i / n
}
O <- c()
if (density == "Cauchy") {
for (i in 1:n){
x <- V[i]
O[i] <- abs(E[i] - ((alpha * stats::pcauchy(x, m1, s1)) + ((1 - alpha) * stats::pcauchy(x, m2, s2))))
}
}
else {
for (i in 1:n)
{
x <- V[i]
O[i] <- abs(E[i] - ((alpha * stats::pnorm(x, m1, s1)) + ((1 - alpha) * stats::pnorm(x, m2, s2))))
}
}
M <- max(O)
S[j] <- M
}
plot(S[1:500])
return(S)
}
MCMCrate(m1 = 10, m2 = 0, s1 = 2, s2 = 4, alpha = 0.5, Nsim = 1000, density = "Cauchy")
MCMCrate(m1 = 10, m2 = 0, s1 = 2, s2 = 4, alpha = 0.5, Nsim = 1000)
# source(here::here("R", "MCMCmixture.R"))
#' MCMC rate
#'
#'
#' MCMCrate generate 500 Markov Chain values simultaneously
#' at each iteration of the Algorithm. As its output, it will return the vector of supremum of the absolute
#' difference between the empirical CDF of the 1000 generated values of the chain and the actual CDF of the
#' target distribution at each iteration. It will also plot the differences.
#'
#' @inheritParams target_density
#' @param Nsim  number of values to be simulated from the mixture distribution
#'
#' @return vector of supremum of the absolute difference between the empirical
#' CDF of the 500 generated values of the chain and the actual CDF of the
#' target distribution at each iteration.
#' @export
#'
#' @examples
#' MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5, Nsim = 1000)
#' MCMCrate(m1 = 10, m2 = 0, s1 = 2, s2 = 4, alpha = 0.5, Nsim = 1000, density = "Cauchy")
#'
MCMCrate <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
n <- 1000
S <- c()
Z <- do.call("rbind", replicate(n, chain(m1, m1, m2, s1, s2, alpha, Nsim, density), simplify = F))
for (j in 1:Nsim)
{
P <- Z[, j]
V <- sort(P)
E <- c()
for (i in 1:n){
E[i] <- i / n
}
O <- c()
if (density == "Cauchy") {
for (i in 1:n){
x <- V[i]
O[i] <- abs(E[i] - ((alpha * stats::pcauchy(x, m1, s1)) + ((1 - alpha) * stats::pcauchy(x, m2, s2))))
}
}
else {
for (i in 1:n)
{
x <- V[i]
O[i] <- abs(E[i] - ((alpha * stats::pnorm(x, m1, s1)) + ((1 - alpha) * stats::pnorm(x, m2, s2))))
}
}
M <- max(O)
S[j] <- M
}
plot(S[1:50])
return(S)
}
MCMCrate(m1 = 10, m2 = 0, s1 = 2, s2 = 4, alpha = 0.5, Nsim = 1000)
# source(here::here("R", "MCMCmixture.R"))
#' MCMC rate
#'
#'
#' MCMCrate generate 500 Markov Chain values simultaneously
#' at each iteration of the Algorithm. As its output, it will return the vector of supremum of the absolute
#' difference between the empirical CDF of the 1000 generated values of the chain and the actual CDF of the
#' target distribution at each iteration. It will also plot the differences.
#'
#' @inheritParams target_density
#' @param Nsim  number of values to be simulated from the mixture distribution
#'
#' @return vector of supremum of the absolute difference between the empirical
#' CDF of the 500 generated values of the chain and the actual CDF of the
#' target distribution at each iteration.
#' @export
#'
#' @examples
#' MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5, Nsim = 1000)
#' MCMCrate(m1 = 10, m2 = 0, s1 = 2, s2 = 4, alpha = 0.5, Nsim = 1000, density = "Cauchy")
#'
MCMCrate <- function(m1, m2, s1, s2, alpha, Nsim, density = "Normal") {
n <- 1000
S <- c()
Z <- do.call("rbind", replicate(n, chain(m1, m1, m2, s1, s2, alpha, Nsim, density), simplify = F))
for (j in 1:Nsim)
{
P <- Z[, j]
V <- sort(P)
E <- c()
for (i in 1:n){
E[i] <- i / n
}
O <- c()
if (density == "Cauchy") {
for (i in 1:n){
x <- V[i]
O[i] <- abs(E[i] - ((alpha * stats::pcauchy(x, m1, s1)) + ((1 - alpha) * stats::pcauchy(x, m2, s2))))
}
}
else {
for (i in 1:n)
{
x <- V[i]
O[i] <- abs(E[i] - ((alpha * stats::pnorm(x, m1, s1)) + ((1 - alpha) * stats::pnorm(x, m2, s2))))
}
}
M <- max(O)
S[j] <- M
}
Supnorm = S[1:50]
plot(Supnorm)
return(S)
}
MCMCrate(m1 = 10, m2 = 0, s1 = 2, s2 = 4, alpha = 0.5, Nsim = 1000)
MCMCrate(m1 = 10, m2 = 0, s1 = 2, s2 = 4, alpha = 0.5, Nsim = 100)
MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5,
MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5, Nsim = 10)
MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5, Nsim = 100)
library(MCMCMixBimodal)
library(MCMCMixBimodal)
usethis::use_package("testthat", type = "Imports")
library(MCMCMixBimodal)
library(MCMCMixBimodal)
#expect warning message
testthat::expect_error(MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5, Nsim = 10))
#expect warning message
testthat::expect_error(MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5, Nsim = 10))
#expect warning message
testthat::expect_error(MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = -2, alpha = 0.5, Nsim = 1000))
#expect warning message
testthat::expect_error(MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 5, Nsim = 1000))
#expect warning message
testthat::expect_error(MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = -3, Nsim = 1000))
#expect a vector of length 100
testthat::expect_length(MCMCrate(m1 = 20, m2 = 0, s1 = 1, s2 = 2, alpha = 0.5, Nsim = 100), 100)
#expecting a value
testthat::expect_length(target_density(x = 8, m1 = 2, m2 = 7, s1 = 2, s2 = 1, alpha = 0.1, density = "Normal"),1)
#expecting warning message
testthat::expect_error(target_density(x = 8, m1 = 2, m2 = 7, s1 = -2, s2 = 1, alpha = 0.1, density = "Normal"))
#expecting warning message
testthat::expect_error(target_density(x = 8, m1 = 2, m2 = 7, s1 = 2, s2 = 1, alpha = 10, density = "Normal"))
#expecting warning message
testthat::expect_error(target_density(x = 8, m1 = 2, m2 = 7, s1 = 2, s2 = 1, alpha = -5, density = "Normal"))
# expecting a vector of length 100
testthat::expect_length(chain(2, 1, 10, 2, 3, 0.3, 100), 100)
# expecting a vector of length 1000
testthat::expect_length(chain(2, 1, 10, 2, 3, 0.3, 1000), 1000)
#expecting warning message
testthat::expect_error(chain(2, 1, 10, 2, 3, 3, 1000))
#expecting warning message
testthat::expect_error(chain(2, 1, 10, -2, 3, 0.3, 1000))
# expecting warning message
testthat::expect_error(MCMCmixture(1, 10, 2, 3, 3, -1000, density = "Normal"))
# expecting a vector of length 1000
testthat::expect_length(MCMCmixture(1, 10, 2, 3, 0.3, 1000, density = "Normal"), 1000)
# expecting a vector of length 1000
testthat::expect_length(MCMCmixture(1, 10, 2, 2, 0.5, 1000, density = "Cauchy"), 1000)
# expecting warning message
testthat::expect_error(MCMCmixture(1, 10, 2, 3, 3, 1000, density = "Normal"))
# expecting warning message
testthat::expect_error(MCMCmixture(1, 10, 2, 3, 0.3, 10, density = "Normal"))
# expecting warning message
testthat::expect_error(MCMCmixture(1, 10, -2, 3, 3, 1000, density = "Normal"))
# expecting warning message
testthat::expect_error(MCMCmixture(1, 10, 2, 3, 3, 100.5, density = "Normal"))
